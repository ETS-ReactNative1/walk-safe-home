{"version":3,"sources":["PanicButton.png","PanicButtonPressed.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","flexGrow","textAlign","menuButton","marginRight","spacing","title","callInput","width","marginTop","alertText","color","directions","fontWeight","drawer","margin","padding","App","classes","localStorage","require","useState","settingsOpen","setSettingsOpen","callNumber","setCallNumber","panicBtnPressed","setPanicBtnPressed","textNumbers","setTextNumbers","useEffect","get","split","className","Drawer","anchor","open","onClose","Typography","variant","TextField","onInput","e","test","target","value","set","id","label","inputProps","style","join","AppBar","position","Toolbar","IconButton","edge","aria-label","onClick","Grid","container","direction","justify","alignItems","render","fetchingPosition","coords","latitude","longitude","error","getCurrentPosition","Button","window","location","href","src","PanicButtonPressedImg","PanicButtonImg","alt","message","isNaN","parseFloat","toFixed","List","dense","map","ListItem","ListItemIcon","ListItemText","primary","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.03c14aa9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/PanicButton.1b547c0f.png\";","module.exports = __webpack_public_path__ + \"static/media/PanicButtonPressed.b31420be.png\";","import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport Drawer from '@material-ui/core/Drawer';\nimport TextField from '@material-ui/core/TextField';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MessageIcon from '@material-ui/icons/Message';\nimport Geolocation from 'react-geolocation';\nimport PanicButtonImg from './PanicButton.png';\nimport PanicButtonPressedImg from './PanicButtonPressed.png';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    textAlign: 'center',\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n    marginRight: theme.spacing(5),\n  },\n  callInput: {\n    width: \"80%\",\n    marginTop: \"20px\",\n    textAlign: \"center\",\n  },\n  alertText: {\n    color: \"red\",\n  },\n  directions: {\n    fontWeight: 'bolder',\n    marginTop: '10px',\n  },\n  drawer: {\n    margin: '20px',\n    padding: '20px',\n  },\n}));\n\nconst App = () => {\n  const classes = useStyles();\n  var localStorage = require('local-storage');\n  //local storage keys: wsh-call, wsh-text\n  const [settingsOpen, setSettingsOpen] = useState(false);\n  const [callNumber, setCallNumber] = useState(\"911\")\n  const [panicBtnPressed, setPanicBtnPressed] = useState(false);\n  const [textNumbers, setTextNumbers] = useState([\"No Texting Numbers Stored!\"]);\n   \n  //onload\n  useEffect(() => {\n    if(localStorage(\"wsh-call\") != null){\n      setCallNumber(localStorage.get(\"wsh-call\"));\n    }\n    if(localStorage(\"wsh-text\") != null){\n      setTextNumbers(localStorage.get(\"wsh-text\").split(\",\"));\n    }\n  }, []);\n  const handlePanic = () => {\n    setPanicBtnPressed(true);\n    window.location.href = \"tel://\" + callNumber;\n  }\n  return (\n    <div className={classes.root}>\n\n      {/*Setting Drawer*/}\n      <Drawer\n        anchor=\"left\"\n        className={classes.drawer}\n        open={settingsOpen}\n        onClose={() => {setSettingsOpen(false)}}\n      >\n        {/*Settings - CallInput*/}\n        <Typography className={classes.directions} variant=\"body2\">enter number to call</Typography>\n        <TextField \n        className={classes.callInput} \n        onInput={(e) => {if(/^\\d+$/.test(e.target.value)){setCallNumber(e.target.value); localStorage.set(\"wsh-call\",e.target.value);}}} \n        id=\"CallInput\" \n        label=\"Emergency Number to Call &#9742;\" \n        variant=\"outlined\" \n        value={callNumber}\n        inputProps={{style: { textAlign: 'center' }}}\n        >\n        </TextField>\n\n        {/*Settings - TextInput*/}\n        <hr />\n        <Typography className={classes.directions} variant=\"body2\">enter number(s) to text</Typography>\n        <TextField \n        className={classes.callInput} \n        onInput={(e) => {setTextNumbers(e.target.value.split(\",\")); localStorage.set(\"wsh-text\",e.target.value);}} \n        id=\"TextInput\" \n        label=\"Emergency Number(s) to Text &#128241;\" \n        variant=\"outlined\" \n        value={textNumbers.join()}\n        inputProps={{style: { textAlign: 'center' }}}\n        >\n        </TextField>\n        <Typography variant=\"body2\">seperate each number with a comma<br />e.g. \"4408379929,7739939992\"</Typography>\n      </Drawer>\n\n      {/*Header*/}\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={() => {setSettingsOpen(true)}}>\n            <SettingsIcon />\n          </IconButton>\n          <Typography variant=\"h4\" className={classes.title}>\n            <center> WalkSafe &#8962; </center>\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      <Grid\n        container\n        direction=\"column\"\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n        {/*CallInput*/}\n        <Typography className={classes.directions} variant=\"body2\">click red button to call your emergency contact below</Typography>\n        <TextField \n        className={classes.callInput} \n        onInput={(e) => {if(/^\\d+$/.test(e.target.value)){setCallNumber(e.target.value); localStorage.set(\"wsh-call\",e.target.value);}}} \n        id=\"CallInput\" \n        label=\"Emergency Number to Call &#9742;\" \n        variant=\"outlined\" \n        value={callNumber}\n        inputProps={{style: { textAlign: 'center' }}}\n        >\n        </TextField>\n        <Typography variant=\"body2\">the number you enter will be autosaved on your phone</Typography>\n\n        {/*GeoLocation*/}\n        <hr />\n        <Geolocation\n          render={({\n            fetchingPosition,\n            position: { coords: { latitude, longitude } = {} } = {},\n            error,\n            getCurrentPosition\n          }) =>\n            <div>\n              {/*PanicButton*/}\n              <Button onClick={() => {getCurrentPosition(); handlePanic()}} ><img src={panicBtnPressed ? PanicButtonPressedImg : PanicButtonImg} alt=\"Panic Button\" /></Button> <br />\n              {panicBtnPressed ? \n                <Typography className={classes.alertText} variant=\"body2\">panic button pressed!<br />help texts sent to below numbers</Typography>\n              : <div></div>}\n              {error &&\n                <Typography className={classes.alertText} variant=\"body2\">\n                  {error.message}\n                </Typography>}\n              <Typography variant=\"body2\">\n                LATITUDE: {isNaN(parseFloat(latitude)) ? <div></div> : parseFloat(latitude).toFixed(4)}<br />\n                LONGITUDE: {isNaN(parseFloat(longitude)) ? <div></div> : parseFloat(longitude).toFixed(4)}\n              </Typography>\n            </div>}\n        />\n\n        {/*TextsInput*/}\n        <hr />\n        <Typography variant=\"body2\">numbers texted when the panic button pressed:</Typography>\n        <List dense={true}>\n          {textNumbers.map(e => \n            <ListItem>\n            <ListItemIcon>\n                <MessageIcon />\n            </ListItemIcon>\n            <ListItemText primary={e}></ListItemText>\n          </ListItem>\n          )}\n        </List>\n        <Typography variant=\"body2\">to edit, click the settings gear icon on the top-left</Typography>\n\n        {/*Footer*/}\n        <hr />\n        <Typography variant=\"body2\">\n          made with &hearts; by Shrey Ravi for free<br />\n          WalkSafe &#8962; is not a replacement for law enforcement/safety<br />\n          <a href=\"https://www.shreyravi.com/contact.html\">Contact</a> | <a href=\"#\">Legal</a> | <a href=\"https://github.com/ShreyRavi/walk-safe-home\">GitHub</a> | <a href=\"https://github.com/ShreyRavi/walk-safe-home/commit/cdab0072a54bd6e8f479ee4489367fb4d9f66eed\">v1.0</a>\n        </Typography>\n\n      \n      </Grid>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}