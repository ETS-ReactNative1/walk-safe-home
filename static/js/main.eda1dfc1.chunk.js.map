{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Alert","props","elevation","variant","theme","createMuiTheme","palette","background","default","primary","red","secondary","main","useStyles","makeStyles","root","flexGrow","height","textAlign","backgroundColor","menuButton","title","callInput","width","alertText","color","directions","fontWeight","marginTop","helpDrawer","padding","settingsDrawer","appBar","panicButton","fontSize","panicButtonText","hidden","visibility","divider","marginBottom","links","textDecoration","App","classes","localStorage","require","useState","settingsOpen","setSettingsOpen","helpOpen","setHelpOpen","callNumber","setCallNumber","panicBtnPressed","setPanicBtnPressed","textNumbers","setTextNumbers","useEffect","get","split","handleCloseSnackbar","e","r","ThemeProvider","CssBaseline","Drawer","anchor","className","open","onClose","Grid","container","direction","justify","alignItems","IconButton","onClick","Typography","Divider","href","TextField","onInput","test","target","value","set","id","label","inputProps","style","join","List","dense","map","ListItem","ListItemIcon","ListItemText","AppBar","position","Toolbar","edge","helpButton","aria-label","render","fetchingPosition","coords","latitude","longitude","error","getCurrentPosition","Fab","size","window","location","Snackbar","autoHideDuration","severity","message","parseFloat","toFixed","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.eda1dfc1.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { createMuiTheme, ThemeProvider, makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport IconButton from '@material-ui/core/IconButton';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport Grid from '@material-ui/core/Grid';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport HelpIcon from '@material-ui/icons/Help';\nimport Drawer from '@material-ui/core/Drawer';\nimport TextField from '@material-ui/core/TextField';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MessageIcon from '@material-ui/icons/Message';\nimport Geolocation from 'react-geolocation';\nimport Fab from '@material-ui/core/Fab';\nimport red from '@material-ui/core/colors/red';\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Divider from '@material-ui/core/Divider';\n\n//Alert from Material-UI Labs\nconst Alert = (props) => {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst theme = createMuiTheme({\n  palette: {\n    background: {\n      default: '#F44335',\n    },\n    primary: red,\n    secondary: {\n      main: '#F44335',\n    },\n  },\n});\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    height: '100%',\n    textAlign: 'center',\n    backgroundColor: '#F44335',\n  },\n  menuButton: {\n\n  },\n  title: {\n    flexGrow: 1,\n  },\n  callInput: {\n    width: \"80%\",\n    textAlign: \"center\",\n  },\n  alertText: {\n    color: \"red\",\n  },\n  directions: {\n    fontWeight: 'bolder',\n    marginTop: '10px',\n  },\n  helpDrawer: {\n    width: '100%',\n    height: '100%',\n    padding: '40px',\n    backgroundColor: '#F44335',\n  },\n  settingsDrawer: {\n    width: '100%',\n    height: '100%',\n    padding: '40px',\n    backgroundColor: '#F44335',\n  },\n  appBar: {\n\n  },\n  panicButton: {\n    marginTop: '70%',\n    width: '300px',\n    height: '300px',\n    fontSize: '190px',\n  },\n  panicButtonText: {\n    marginTop: '-30px',\n  },\n  hidden: {\n    visibility: 'hidden',\n  },\n  divider: {\n    marginTop: '20px',\n    marginBottom: '20px',\n  },\n  links: {\n    textDecoration: 'none',\n  },\n}));\n\nconst App = () => {\n  const classes = useStyles();\n  var localStorage = require('local-storage');\n  //local storage keys: wsh-call, wsh-text\n  const [settingsOpen, setSettingsOpen] = useState(false);\n  const [helpOpen, setHelpOpen] = useState(false);\n  const [callNumber, setCallNumber] = useState(\"911\")\n  const [panicBtnPressed, setPanicBtnPressed] = useState(false);\n  const [textNumbers, setTextNumbers] = useState([\"No Texting Numbers Stored!\"]);\n   \n  //onload\n  useEffect(() => {\n    if(localStorage(\"wsh-call\") != null){\n      setCallNumber(localStorage.get(\"wsh-call\"));\n    }\n    if(localStorage(\"wsh-text\") != null){\n      setTextNumbers(localStorage.get(\"wsh-text\").split(\",\"));\n    }\n  }, []);\n  const handlePanic = () => {\n    setPanicBtnPressed(true);\n    window.location.href = \"tel://\" + callNumber;\n  }\n  const handleCloseSnackbar = (e, r) => {\n    if (r === 'clickaway') {\n      return;\n    }\n    setPanicBtnPressed(false);\n  }\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n\n      {/*Help Drawer*/}\n      <Drawer\n        anchor=\"left\"\n        className={classes.helpDrawer}\n        open={helpOpen}\n        onClose={() => {setHelpOpen(false)}}\n      >\n        {/*Help Content*/}\n        <div className={classes.helpDrawer}>\n        <Grid \n          container\n          direction=\"row\"\n          justify=\"flex-start\"\n          alignItems=\"flex-start\"\n        >\n          <IconButton onClick={() => {setHelpOpen(false)}}>\n            <ArrowBackIosIcon />\n          </IconButton>\n          <Typography variant=\"h3\">\n            Welcome to WalkSafe &#8962;\n          </Typography>\n        </Grid>\n\n        <Divider className={classes.divider} />\n\n        <Typography variant=\"body1\">\n          WalkSafe &#8962; is a personal safety app that calls and texts your emergency contacts with the click of just one button! <br />\n          When the panic button is clicked, one contact of your choice will be called from your phone. <br />\n          In addition, up to 10 other numbers will be texted an SOS message automatically from our service about you. <br />\n          To edit the number to call/text automatically, click on the settings gear (<SettingsIcon />) on the top right of the screen. <br />\n        </Typography>\n\n        {/*Help - Footer*/}\n        <Divider className={classes.divider} />\n        <Typography variant=\"body2\">\n          Made with &hearts; by Shrey Ravi<br />\n          WalkSafe &#8962; is not a replacement for law enforcement/safety<br />\n          <a className={classes.links} href=\"https://www.shreyravi.com/contact.html\">Contact</a> | <a className={classes.links} href=\"#\">Legal</a> | <a className={classes.links} href=\"https://github.com/ShreyRavi/walk-safe-home\">GitHub</a> | <a className={classes.links} href=\"https://github.com/ShreyRavi/walk-safe-home/commit/cdab0072a54bd6e8f479ee4489367fb4d9f66eed\">Version 2</a>\n        </Typography>\n\n        </div>\n      </Drawer>\n\n      {/*Setting Drawer*/}\n      <Drawer\n        anchor=\"right\"\n        className={classes.settingsDrawer}\n        open={settingsOpen}\n        onClose={() => {setSettingsOpen(false)}}\n      >\n        <div className={classes.settingsDrawer}>\n        <Grid \n          container\n          direction=\"row\"\n          justify=\"flex-start\"\n          alignItems=\"flex-start\"\n        >\n          <IconButton onClick={() => {setSettingsOpen(false)}}>\n            <ArrowBackIosIcon />\n          </IconButton>\n          <Typography variant=\"h3\">\n            WalkSafe &#8962; Settings\n          </Typography>\n        </Grid>\n\n        <Divider className={classes.divider} />\n\n        {/*Settings - CallInput*/}\n        <Typography className={classes.directions} variant=\"body2\">Enter number to call:<br /></Typography>\n        <TextField \n        className={classes.callInput} \n        onInput={(e) => {if(/^\\d+$/.test(e.target.value)){setCallNumber(e.target.value); localStorage.set(\"wsh-call\",e.target.value);}}} \n        id=\"CallInput\" \n        label=\"Emergency Number to Call &#9742;\" \n        variant=\"outlined\" \n        value={callNumber}\n        inputProps={{style: { textAlign: 'center' }}}\n        >\n        </TextField>\n\n        {/*Settings - TextInput*/}\n        <Divider className={classes.divider} />\n        <Typography className={classes.directions} variant=\"body2\">Enter number(s) to text:<br /></Typography>\n        <TextField \n        className={classes.callInput} \n        onInput={(e) => {setTextNumbers(e.target.value.split(\",\")); localStorage.set(\"wsh-text\",e.target.value);}} \n        id=\"TextInput\" \n        label=\"Emergency Number(s) to Text &#128241;\" \n        variant=\"outlined\" \n        value={textNumbers.join()}\n        inputProps={{style: { textAlign: 'center' }}}\n        >\n        </TextField>\n        <Typography variant=\"body2\">seperate each number with a comma<br />e.g. \"4408379929,7739939992\"<br /></Typography>\n\n        {/*Settings - TextsShow*/}\n        <Divider className={classes.divider} />\n        <Typography variant=\"body2\">Numbers texted when the panic button pressed:</Typography>\n        <List dense={true}>\n          {textNumbers.map(e => \n            <ListItem>\n            <ListItemIcon>\n                <MessageIcon />\n            </ListItemIcon>\n            <ListItemText primary={e}></ListItemText>\n          </ListItem>\n          )}\n        </List>\n\n        {/*Settings - Footer*/}\n        <Divider className={classes.divider} />\n        <Typography variant=\"body2\">\n          Made with &hearts; by Shrey Ravi<br />\n          WalkSafe &#8962; is not a replacement for law enforcement/safety<br />\n          <a href=\"https://www.shreyravi.com/contact.html\">Contact</a> | <a href=\"#\">Legal</a> | <a href=\"https://github.com/ShreyRavi/walk-safe-home\">GitHub</a> | <a href=\"https://github.com/ShreyRavi/walk-safe-home/commit/cdab0072a54bd6e8f479ee4489367fb4d9f66eed\">Version 2</a>\n        </Typography>\n\n        </div>\n      </Drawer>\n\n      {/*Header*/}\n      <AppBar className={classes.appBar} position=\"fixed\" color=\"primary\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.helpButton} color=\"inherit\" aria-label=\"menu\" onClick={() => {setHelpOpen(true)}}>\n            <HelpIcon />\n          </IconButton>\n          <Typography variant=\"h4\" className={classes.title}>\n            <center> WalkSafe &#8962; </center>\n          </Typography>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={() => {setSettingsOpen(true)}}>\n            <SettingsIcon />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n\n      <Grid\n        container\n        direction=\"column\"\n        justify=\"center\"\n        alignItems=\"center\"\n        className={classes.root}\n      >\n\n        {/*GeoLocation + Panic Button*/}\n        <Geolocation\n          render={({\n            fetchingPosition,\n            position: { coords: { latitude, longitude } = {} } = {},\n            error,\n            getCurrentPosition\n          }) =>\n            <div>\n              {/*PanicButton*/}\n              <Fab className={classes.panicButton} size=\"large\" variant=\"round\" color=\"primary\" onClick={() => {getCurrentPosition(); handlePanic()}}><div className={classes.panicButtonText}>&#8962;</div></Fab>\n              {panicBtnPressed ? \n                <Snackbar open={panicBtnPressed} autoHideDuration={15000} onClose={handleCloseSnackbar}>\n                  <Alert onClose={handleCloseSnackbar} severity=\"success\">\n                    Panic button pressed, help texts sent to selected numbers!\n                  </Alert>\n                </Snackbar>\n              : <div></div>}\n              {error && <Snackbar open={panicBtnPressed} onClose={handleCloseSnackbar} autoHideDuration={15000}> \n                <Alert onClose={handleCloseSnackbar} severity=\"error\">\n                  {error.message}\n                </Alert>\n              </Snackbar>}\n              <Typography className={classes.hidden} variant=\"body2\">\n                LATITUDE:  {parseFloat(latitude).toFixed(4)}<br />\n                LONGITUDE: {parseFloat(longitude).toFixed(4)}\n              </Typography>\n            </div>}\n        />\n        {/*<br /><br />\n        <Typography variant=\"body2\">made by Shrey Ravi &hearts; stay safe</Typography>*/}\n      \n      </Grid>\n    </ThemeProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}